// Generated by CoffeeScript 1.9.0
(function() {
  AdminApp.Views.viewsGridSystem = Backbone.View.extend({
    el: '#gridster-system',
    $gridster: {},
    quillObject: {},
    responseData: {},
    $selectedWiget: null,
    $deleteWidget: $('#delete-grid-widget'),
    $editWidget: $('#edit-grid-widget'),
    $editModal: $('#edit-widget-modal'),
    $templateTextEditor: $('#template-text-editor'),
    $templateLoadImage: $('#template-load-views-image'),
    $templateParameters: $('#product-parameters-template'),
    $templateProductTitle: $('#product-title-template'),
    $widgetEditorBody: $('#widget-editor-body'),
    idTextEditor: 'full-editor',
    idTextEditorsToolbar: 'full-toolbar',
    initialize: function() {
      console.log('Inititalize viewsGridSystem');
      this.$gridster = $('.gridster > ul').gridster({
        widget_margins: [2, 2],
        widget_base_dimensions: [25, 25],
        autogrow_cols: true,
        max_cols: 25,
        resize: {
          enabled: true
        },
        serialize_params: (function(_this) {
          return function($w, wgd) {
            return _this.serializeParameters($($w), wgd);
          };
        })(this)
      }).data('gridster');
      AdminApp.globalObjects.$gridster = this.$gridster;
      if (this.model.has('editview')) {
        this.initIssetView();
      }
      this.$editModal.on('shown.bs.modal', (function(_this) {
        return function() {
          console.log('Открываем редактор для ' + _this.$selectedWiget.attr('data-widget-type'));
          return _this.initEditor(_this.$selectedWiget.attr('data-widget-type'));
        };
      })(this));
      return this.$editModal.on('hide.bs.modal', (function(_this) {
        return function() {
          _this.$widgetEditorBody.html(' ');
          return _this.$widgetEditorBody.append('<div class="loader"></div>');
        };
      })(this));
    },
    events: {
      'click #add-grid-widget': 'addWidget',
      'click .gs-w': 'clickWidget',
      'click #delete-grid-widget': 'deleteWidget',
      'click #edit-grid-widget': 'openEditDialog',
      'click #widget-save-changes': 'saveWidgetContent',
      'submit #widget-editor-body form': 'loadImage',
      'click #serialize-grid': 'serializeGrid',
      'click #serialize-log-grid': 'serializeLogGrid'
    },
    initIssetView: function() {
      var editview;
      editview = this.model.get('editview');
      console.log('Уже существует шаблон. Выводим его...', editview);
      _.each(editview, (function(_this) {
        return function(cell, index) {
          var compiled;
          compiled = _.template(cell.htmlContent);
          return cell.htmlContent = compiled(_this.model.toJSON());
        };
      })(this));
      this.$gridster.remove_all_widgets();
      return _.each(editview, (function(_this) {
        return function(cell, index) {
          var widget;
          widget = _this.$gridster.add_widget('<li data-widget-type="' + cell.type + '" class="' + cell.type + '-widget">' + cell.htmlContent + '</li>', cell.size_x, cell.size_y, cell.col, cell.row);
          return _this.$gridster.resize_widget(widget, cell.size_x, cell.size_y);
        };
      })(this));
    },
    serializeParameters: function(widget, wgd) {
      var content, params, type;
      type = widget.attr('data-widget-type');
      switch (type) {
        case 'title':
          content = '{!! @include("products.title") !!}';
          break;
        case 'parameters':
          content = '{!! @include("parameters.list") !!}';
          break;
        default:
          content = widget.html();
      }
      params = {
        id: wgd.el[0].id,
        col: wgd.col,
        row: wgd.row,
        size_x: wgd.size_x,
        size_y: wgd.size_y,
        type: type,
        htmlContent: content
      };
      return params;
    },
    serializeGrid: function() {
      var editview, view;
      editview = this.serializeLogGrid();
      view = '<div class="gridster ready">' + $('.gridster.ready').html() + '</div>';
      this.model.set('view', view);
      this.model.set('editview', editview);
      return this.model.save();
    },
    serializeLogGrid: function() {
      var jsongrid;
      jsongrid = this.$gridster.serialize();
      console.log('jsongrid', jsongrid);
      _.each(jsongrid, function(cell, index) {
        var type;
        type = cell.type;
        switch (type) {
          case 'title':
            return cell.htmlContent = $('#underscore-product-title-template').html();
          case 'parameters':
            return cell.htmlContent = $('#underscore-product-parameters-template').html();
        }
      });
      console.log('rendered jsongrid', JSON.stringify(jsongrid));
      return JSON.stringify(jsongrid);
    },
    saveWidgetContent: function() {
      var type;
      type = this.$selectedWiget.attr('data-widget-type');
      switch (type) {
        case 'text':
          return this.saveTextWidget();
        case 'image':
          return this.saveImageWidget();
      }
    },
    saveTextWidget: function() {
      var html;
      html = this.quillObject.getHTML();
      console.log(html);
      return this.$selectedWiget.html(html + '<span class="gs-resize-handle gs-resize-handle-both"></span>');
    },
    openEditDialog: function() {},
    initEditor: function(type) {
      switch (type) {
        case 'text':
          return this.initTextEditor();
        case 'image':
          return this.initImageEditor();
      }
    },
    saveImageWidget: function() {
      var imagediv;
      console.log('Close image widget');
      this.$selectedWiget.html('<div class="image-widget-backdiv"></div><span class="gs-resize-handle gs-resize-handle-both"></span>');
      imagediv = this.$selectedWiget.find('.image-widget-backdiv');
      return imagediv.css({
        'background-image': 'url(' + this.responseData.imageurl + ')'
      });
    },
    loadImage: function(e) {
      var data, form, pb, resdiv, status, xhr;
      e.preventDefault();
      form = e.target;
      data = new FormData(form);
      xhr = new XMLHttpRequest();
      pb = $('#progress-load-image').find('.progress-bar');
      status = $('#status-load-image');
      resdiv = $('#result-load-image');
      if ($(form).find('input[type=file]').val() !== '') {
        xhr.open('POST', form.action);
        xhr.onload = (function(_this) {
          return function(e) {
            var result;
            status.text(e.currentTarget.responseText);
            result = JSON.parse(e.currentTarget.responseText);
            console.log(result.imageurl);
            resdiv.css('background-image', 'url(' + result.imageurl + ')');
            return _this.responseData = result;
          };
        })(this);
        xhr.upload.onprogress = function(e) {
          pb.attr("aria-valuenow", e.loaded / e.total * 100);
          return pb.css("width", (e.loaded / e.total * 100) + '%');
        };
        return xhr.send(data);
      } else {
        return status.text("Необходимо выбрать файл");
      }
    },
    initImageEditor: function() {
      console.log('Init image editor');
      this.$widgetEditorBody.html(this.$templateLoadImage.html());
      if (!window.FormData) {
        return $('#status-load-image').text("Ваш браузер не потдерживает FormData");
      }
    },
    initTextEditor: function() {
      var content;
      content = this.$selectedWiget.html();
      this.$widgetEditorBody.html(this.$templateTextEditor.html());
      $('#' + this.idTextEditor).html(content);
      return this.quillObject = makeQuill(this.idTextEditor, this.idTextEditorsToolbar);
    },
    deleteWidget: function() {
      this.$deleteWidget.attr('disabled', 'disabled');
      this.$editWidget.attr('disabled', 'disabled');
      this.$gridster.remove_widget(this.$selectedWiget);
      return this.selectedWiget = null;
    },
    unselectWidget: function() {
      if (this.$selectedWiget != null) {
        this.$selectedWiget.css({
          'background': '#ddd'
        });
      }
      return this.$selectedWiget = null;
    },
    addWidget: function(e) {
      var el, text, type;
      e.preventDefault();
      el = $(e.target);
      type = el.attr('data-widget-type');
      text = el.text();
      switch (type) {
        case 'parameters':
          text = this.$templateParameters.html();
          break;
        case 'title':
          text = this.$templateProductTitle.html();
      }
      return this.$gridster.add_widget('<li data-widget-type="' + type + '" class="' + type + '-widget">' + text + '</li>', 4, 4);
    },
    clickWidget: function(e) {
      var el;
      e.preventDefault();
      el = $(e.target);
      if (!el.is('li')) {
        el = el.parent('li.gs-w');
      }
      console.log('Click on widget');
      if (this.$selectedWiget != null) {
        this.$selectedWiget.css({
          'border': '1px dashed #ccc'
        });
      }
      this.$selectedWiget = el;
      this.$deleteWidget.removeAttr('disabled');
      this.$editWidget.removeAttr('disabled');
      return this.$selectedWiget.css({
        'border': '1px solid #ccc'
      });
    }
  });

  AdminApp.initViews.viewsGridSystem = new AdminApp.Views.viewsGridSystem({
    model: AdminApp.initModels.Product
  });

}).call(this);
