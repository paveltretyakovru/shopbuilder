// Generated by CoffeeScript 1.9.0
var AdminApp;

AdminApp = {
  Views: {},
  Collections: {},
  Models: {},
  initViews: {},
  initModels: {},
  initCollections: {}
};

AdminApp.Views.categoryParameters = Backbone.View.extend({
  el: '#edit-categories-form',
  $elParams: $('#category-edit-parameters'),
  $elLabels: $('#parameters-links'),
  $elSearchParams: $('#category-edit-searchparameters'),
  initialize: function() {
    var addSearchTag, deleteLabel, insertLabel;
    console.log('Initialize categoryParameters view');
    insertLabel = (function(_this) {
      return function(tagname) {
        var label;
        console.log('insertLabel');
        label = "<a href='#' class='label label-primary parameter-label'>" + tagname + "</a> ";
        return _this.$elLabels.append(label);
      };
    })(this);
    deleteLabel = (function(_this) {
      return function(tagname) {
        _this.$elLabels.find('a:contains(' + tagname + ')').remove();
        return _this.$elSearchParams.removeTag(tagname);
      };
    })(this);
    addSearchTag = (function(_this) {
      return function(tagname) {
        if (!_this.$elParams.tagExist(tagname)) {
          return _this.$elSearchParams.removeTag(tagname);
        }
      };
    })(this);
    this.$elParams.tagsInput({
      'width': '100%',
      'defaultText': 'добавить параметр',
      'onAddTag': function(tagname) {
        return insertLabel(tagname);
      },
      'onRemoveTag': function(tagname) {
        return deleteLabel(tagname);
      }
    });
    return this.$elSearchParams.tagsInput({
      'width': '100%',
      'defaultText': '',
      'onAddTag': function(tagname) {
        return addSearchTag(tagname);
      }
    });
  },
  events: {
    'click .parameter-label': 'clickParameterLebel'
  },
  clickParameterLebel: function(e) {
    var el, tag;
    e.preventDefault();
    el = $(e.target);
    tag = el.html();
    if (!this.$elSearchParams.tagExist(tag)) {
      return this.$elSearchParams.addTag(tag);
    } else {
      return console.log('Параметр уже существует');
    }
  }
});

AdminApp.Views.viewsGridSystem = Backbone.View.extend({
  el: '#gridster-system',
  $gridster: {},
  $selectedWiget: null,
  $deleteWidget: $('#delete-grid-widget'),
  $editWidget: $('#edit-grid-widget'),
  $editModal: $('#edit-widget-modal'),
  initialize: function() {
    console.log('Inititalize viewsGridSystem');
    this.$gridster = $('.gridster > ul').gridster({
      widget_margins: [2, 2],
      widget_base_dimensions: [140, 140],
      autogrow_cols: true,
      max_cols: 5,
      resize: {
        enabled: true
      }
    }).data('gridster');
    return this.$editModal.on('shown.bs.modal', (function(_this) {
      return function() {
        console.log('Открываем редактор для ' + _this.$selectedWiget.attr('data-widget-type'));
        return _this.initEditor(_this.$selectedWiget.attr('data-widget-type'));
      };
    })(this));
  },
  events: {
    'click #add-grid-widget': 'addWidget',
    'click .gs-w': 'clickWidget',
    'click #delete-grid-widget': 'deleteWidget',
    'click #edit-grid-widget': 'openEditDialog'
  },
  changeTypeWidget: function() {
    return console.log('type widget');
  },
  openEditDialog: function() {},
  initEditor: function(type) {
    switch (type) {
      case 'text':
        return this.initTextEditor();
    }
  },
  initTextEditor: function() {
    return console.log('Init text editor');
  },
  deleteWidget: function() {
    this.$deleteWidget.attr('disabled', 'disabled');
    this.$editWidget.attr('disabled', 'disabled');
    this.$gridster.remove_widget(this.$selectedWiget);
    return this.selectedWiget = null;
  },
  unselectWidget: function() {
    if (this.$selectedWiget != null) {
      this.$selectedWiget.css({
        'background': '#ddd'
      });
    }
    return this.$selectedWiget = null;
  },
  addWidget: function(e) {
    var el, type;
    e.preventDefault();
    el = $(e.target);
    type = el.attr('data-widget-type');
    console.log('Click add widget ' + type);
    return this.$gridster.add_widget('<li data-widget-type="' + type + '">Виджет ' + el.html() + '</li>', 1, 1);
  },
  clickWidget: function(e) {
    console.log('Click on widget');
    if (this.$selectedWiget != null) {
      this.$selectedWiget.css({
        'border': '1px dashed #ccc'
      });
    }
    this.$selectedWiget = $(e.target);
    this.$deleteWidget.removeAttr('disabled');
    this.$editWidget.removeAttr('disabled');
    return this.$selectedWiget.css({
      'border': '1px solid #ccc'
    });
  }
});

AdminApp.initViews.categoryParameters = new AdminApp.Views.categoryParameters();

AdminApp.initViews.viewsGridSystem = new AdminApp.Views.viewsGridSystem();


/*
$('#typeWidget').on 'change' , ->
	console.log "Test change"
 */
