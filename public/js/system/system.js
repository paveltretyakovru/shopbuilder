// Generated by CoffeeScript 1.9.0
(function() {
  var AdminApp;

  AdminApp = {
    Views: {},
    Collections: {},
    Models: {},
    initViews: {},
    initModels: {},
    initCollections: {}
  };

  AdminApp.Views.categoryParameters = Backbone.View.extend({
    el: '#edit-categories-form',
    $elParams: $('#category-edit-parameters'),
    $elLabels: $('#parameters-links'),
    $elSearchParams: $('#category-edit-searchparameters'),
    initialize: function() {
      var addSearchTag, deleteLabel, insertLabel;
      console.log('Initialize categoryParameters view');
      insertLabel = (function(_this) {
        return function(tagname) {
          var label;
          console.log('insertLabel');
          label = "<a href='#' class='label label-primary parameter-label'>" + tagname + "</a> ";
          return _this.$elLabels.append(label);
        };
      })(this);
      deleteLabel = (function(_this) {
        return function(tagname) {
          _this.$elLabels.find('a:contains(' + tagname + ')').remove();
          return _this.$elSearchParams.removeTag(tagname);
        };
      })(this);
      addSearchTag = (function(_this) {
        return function(tagname) {
          if (!_this.$elParams.tagExist(tagname)) {
            return _this.$elSearchParams.removeTag(tagname);
          }
        };
      })(this);
      this.$elParams.tagsInput({
        'width': '100%',
        'defaultText': 'добавить параметр',
        'onAddTag': function(tagname) {
          return insertLabel(tagname);
        },
        'onRemoveTag': function(tagname) {
          return deleteLabel(tagname);
        }
      });
      return this.$elSearchParams.tagsInput({
        'width': '100%',
        'defaultText': '',
        'onAddTag': function(tagname) {
          return addSearchTag(tagname);
        }
      });
    },
    events: {
      'click .parameter-label': 'clickParameterLebel'
    },
    clickParameterLebel: function(e) {
      var el, tag;
      e.preventDefault();
      el = $(e.target);
      tag = el.html();
      if (!this.$elSearchParams.tagExist(tag)) {
        return this.$elSearchParams.addTag(tag);
      } else {
        return console.log('Параметр уже существует');
      }
    }
  });

  AdminApp.Views.viewsGridSystem = Backbone.View.extend({
    el: '#gridster-system',
    $gridster: {},
    quillObject: {},
    $selectedWiget: null,
    $deleteWidget: $('#delete-grid-widget'),
    $editWidget: $('#edit-grid-widget'),
    $editModal: $('#edit-widget-modal'),
    $templateTextEditor: $('#template-text-editor'),
    $templateLoadImage: $('#template-load-views-image'),
    $widgetEditorBody: $('#widget-editor-body'),
    idTextEditor: 'full-editor',
    idTextEditorsToolbar: 'full-toolbar',
    initialize: function() {
      console.log('Inititalize viewsGridSystem');
      this.$gridster = $('.gridster > ul').gridster({
        widget_margins: [2, 2],
        widget_base_dimensions: [25, 25],
        autogrow_cols: true,
        max_cols: 25,
        resize: {
          enabled: true
        }
      }).data('gridster');
      this.$editModal.on('shown.bs.modal', (function(_this) {
        return function() {
          console.log('Открываем редактор для ' + _this.$selectedWiget.attr('data-widget-type'));
          return _this.initEditor(_this.$selectedWiget.attr('data-widget-type'));
        };
      })(this));
      return this.$editModal.on('hide.bs.modal', (function(_this) {
        return function() {
          return _this.$widgetEditorBody.html(' ');
        };
      })(this));
    },
    events: {
      'click #add-grid-widget': 'addWidget',
      'click .gs-w': 'clickWidget',
      'click #delete-grid-widget': 'deleteWidget',
      'click #edit-grid-widget': 'openEditDialog',
      'click #widget-save-changes': 'saveWidgetContent'
    },
    saveWidgetContent: function() {
      var type;
      type = this.$selectedWiget.attr('data-widget-type');
      switch (type) {
        case 'text':
          return this.saveTextWidget();
      }
    },
    saveTextWidget: function() {
      var html;
      html = this.quillObject.getHTML();
      console.log(html);
      return this.$selectedWiget.html(html + '<span class="gs-resize-handle gs-resize-handle-both"></span>');
    },
    openEditDialog: function() {},
    initEditor: function(type) {
      switch (type) {
        case 'text':
          return this.initTextEditor();
        case 'image':
          return this.initImageEditor();
      }
    },
    initImageEditor: function() {
      console.log('Init image editor');
      return this.$widgetEditorBody.html(this.$templateLoadImage.html());
    },
    initTextEditor: function() {
      var content;
      content = this.$selectedWiget.html();
      this.$widgetEditorBody.html(this.$templateTextEditor.html());
      $('#' + this.idTextEditor).html(content);
      return this.quillObject = makeQuill(this.idTextEditor, this.idTextEditorsToolbar);
    },
    deleteWidget: function() {
      this.$deleteWidget.attr('disabled', 'disabled');
      this.$editWidget.attr('disabled', 'disabled');
      this.$gridster.remove_widget(this.$selectedWiget);
      return this.selectedWiget = null;
    },
    unselectWidget: function() {
      if (this.$selectedWiget != null) {
        this.$selectedWiget.css({
          'background': '#ddd'
        });
      }
      return this.$selectedWiget = null;
    },
    addWidget: function(e) {
      var el, type;
      e.preventDefault();
      el = $(e.target);
      type = el.attr('data-widget-type');
      console.log('Click add widget ' + type);
      return this.$gridster.add_widget('<li data-widget-type="' + type + '">Виджет ' + el.text() + '</li>', 3, 3);
    },
    clickWidget: function(e) {
      var el;
      e.preventDefault();
      el = $(e.target);
      if (!el.is('li')) {
        el = el.parent('li.gs-w');
      }
      console.log('Click on widget');
      if (this.$selectedWiget != null) {
        this.$selectedWiget.css({
          'border': '1px dashed #ccc'
        });
      }
      this.$selectedWiget = el;
      this.$deleteWidget.removeAttr('disabled');
      this.$editWidget.removeAttr('disabled');
      return this.$selectedWiget.css({
        'border': '1px solid #ccc'
      });
    }
  });

  AdminApp.initViews.categoryParameters = new AdminApp.Views.categoryParameters();

  AdminApp.initViews.viewsGridSystem = new AdminApp.Views.viewsGridSystem();


  /*
  $('#typeWidget').on 'change' , ->
  	console.log "Test change"
   */

}).call(this);
